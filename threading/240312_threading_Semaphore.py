# Напишите класс многопоточного обработчика заданий с ограничением по количеству одновременных выполнений по следующим условиям

# Имя класса HubHendler.
# Атрибуты создания: n: int - значение ограничения одновременных выполнений, task - целевая функция (не использует аргументов),
# n_threads: int - количество потоков выполнения задания.
# В классе кроме инициализатора должен быть публичный метод start_hub вызываемый без аргументов. Он создает и запускает указанное
# количество потоков для выполнения целевой задачи с учетом ограничения по количеству одновременных выполнений. 
# При необходимости дополнительно можно создавать и использовать другие методы.
# Решите задачу используя семафор.
# В тестирующей системе будут созданы экземпляры HubHendler с разными атрибутами для проверки необходимого поведения. 
# Целевая функция также будет задана в тестирующей системе.

# Внимание! целевая функция не принимает и не использует никаких аргументов. Подумайте, как в классе можно защитить выполнение целевой функции семафором.



import threading
from typing import Callable

class HubHendler:
    def __init__(self, n: int, task: Callable, n_threads: int) -> None:
        self.task = task
        self.n_threads = n_threads
        self._semaphore = threading.Semaphore(n)

    def start_hub(self) -> None:
        for _ in range(self.n_threads):
            threading.Thread(target=self._task_runner).start()

    def _task_runner(self) -> None:
        with self._semaphore:
            self.task()