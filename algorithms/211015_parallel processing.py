# Параллельная обработка.
# По данным n процессорам и m задач определите, для каждой из задач, каким процессором она будет обработана.
# В данной задаче ваша цель — реализовать симуляцию параллельной обработки списка задач. Такие обработчики
# (диспетчеры) есть во всех операционных системах.

# У вас имеется n процессоров и последовательность из m задач. Для каждой задачи дано время, необходимое на её
# обработку. Очередная работа поступает к первому доступному процессору (то есть если доступных процессоров несколько,
# то доступный процессор с минимальным номером получает эту работу).

# Формат входа. Первая строка входа содержит числа n и m. Вторая содержит числа t_0 ,..., t_m − 1, где t_i — время,
# необходимое на обработку i-й задачи. Считаем, что и процессоры, и задачи нумеруются с нуля.

# Формат выхода. Выход должен содержать ровно m строк: i-я (считая с нуля) строка должна содержать номер процессора,
# который получит i-ю задачу на обработку, и время, когда это произойдёт.

# Sample Input:
# 2 5
# 1 2 3 4 5

# Sample Output:
# 0 0
# 1 0
# 0 1
# 1 2
# 0 4


import heapq
from collections import deque

core, amount = list(map(int, input().split()))
tasks = deque(list(map(int, input().split())))

timing = []
plate = [i for i in range(core) if core >= 1]
res = []

for cpu in plate:
    heapq.heappush(timing, (0, cpu))

while tasks:
    process = tasks.popleft()
    curr_cpu = heapq.heappop(timing)
    res.append(f'{curr_cpu[1]} {curr_cpu[0]}')
    new_process = (process+curr_cpu[0], curr_cpu[1])
    heapq.heappush(timing, new_process)
print(*res, sep='\n')