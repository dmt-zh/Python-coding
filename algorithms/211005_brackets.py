# Скобки в коде. Проверить, правильно ли расставлены скобки в данном коде.
# Вход. Исходный код программы.
# Выход. Проверить, верно ли расставлены скобки. Если нет, выдать индекс первой ошибки.

# Вы разрабатываете текстовый редактор для программистов и хотите реализовать проверку корректности расстановки скобок.
# В коде могут встречаться скобки []{}(). Из них скобки [,{ и ( считаются открывающими, а соответствующими им закрывающими
# скобками являются ],} и ).

# В случае, если скобки расставлены неправильно, редактор должен также сообщить пользователю первое место, где обнаружена ошибка.
# В первую очередь необходимо найти закрывающую скобку, для которой либо нет соответствующей открывающей (например, скобка ] в
# строке “ ]()”), либо же она закрывает не соответствующую ей открывающую скобку (пример: “ ()[}”). Если таких ошибок нет,
# необходимо найти первую открывающую скобку, для которой нет соответствующей закрывающей (пример: скобка ( в строке “ {}([] ”).
# Помимо скобок, исходный код может содержать символы латинского алфавита, цифры и знаки препинания.

# Формат входа. Строка s [1 . . . n], состоящая из заглавных и прописных букв латинского алфавита, цифр, знаков препинания и
# скобок из множества []{}().

# Формат выхода. Если скобки в s расставлены правильно, выведите строку “Success". В противном случае выведите индекс (исполь-
# зуя индексацию с единицы) первой закрывающей скобки, для которой нет соответствующей открывающей. Если такой нет, выведите
# индекс первой открывающей скобки, для которой нет соответствующей закрывающей.

# Sample Input 1:
# ([](){([])})
#
# Sample Output 1:
# Success
#
# Sample Input 2:
# ()[]}
#
# Sample Output 2:
# 5
#
# Sample Input 3:
# {{[()]]
#
# Sample Output 3:
# 7

def is_balanced(s):
    brackets = {')': '(', ']': '[', '}': '{'}
    stack = []
    indx = []

    for num, char in enumerate(s, start=1):
        if char in brackets.values():
            indx.append(num)
            stack.append(char)
        elif char in brackets:
            if len(stack) != 0 and brackets[char] == stack[-1]:
                stack.pop()
                indx.pop()
            else:
                return num
    return indx[-1] if stack else 'Success'

print(is_balanced(input()))