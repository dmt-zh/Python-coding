# Задача на программирование: декодирование Хаффмана. Восстановите строку по её коду и беспрефиксному коду
# символов. В первой строке входного файла заданы два целых числа kk и ll через пробел — количество различных
# букв, встречающихся в строке, и размер получившейся закодированной строки, соответственно. В следующих k строках
# записаны коды букв в формате "letter: code". Ни один код не является префиксом другого. Буквы могут быть
# перечислены в любом порядке. В качестве букв могут встречаться лишь строчные буквы латинского алфавита; каждая
# из этих букв встречается в строке хотя бы один раз. Наконец, в последней строке записана закодированная строка.
# Исходная строка и коды всех букв непусты. Заданный код таков, что закодированная строка имеет минимальный возможный
# размер. В первой строке выходного файла выведите строку s. Она должна состоять из строчных букв латинского алфавита.
# Гарантируется, что длина правильного ответа не превосходит 10^4 символов.

# Sample Input 1:
# 1 1
# a: 0
# 0

# Sample Output 1:
# a

# Sample Input 2:
# 4 14
# a: 0
# b: 10
# c: 110
# d: 111
# 01001100100111

# Sample Output 2:
# abacabad

n, length = input().split()
d = {k.strip(): v for v, k in (input().split(':') for _ in range(int(n)))}
code = input().strip()

def huffman_decode(encoding):
    res = []
    cipher = ''

    for i in code:
        cipher += i
        if cipher in d:
            res.append(d[cipher])
            cipher = ''
    return ''.join(res)

print(huffman_decode(code))